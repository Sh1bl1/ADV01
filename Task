
public class Range<T> where T : IComparable<T>
{
    public T Min { get; set;}
    public T Max { get; set;}

    public Range(T min, T max)
    {
        if (min.CompareTo(max) > 0)
            throw new ArgumentException("Minimum  cannot be greater than maximum .");

        Min = min;
        Max = max;
    }

    public bool IsInRange(T value)
    {
        return value.CompareTo(Min) >= 0 && value.CompareTo(Max) <= 0;
    }

    public T Length<T>()
    {
        try
        {
            return Max<T> - Min<T>;
        }
        catch
        {
            throw new InvalidOperationException("Length calculation is not supported for this type  " );
        }
    }
}
static void Main()
    {
        var intRange = new Range<int>(10, 20);
        Console.WriteLine(intRange.IsInRange(15));  
        Console.WriteLine(intRange.IsInRange(25));  
        Console.WriteLine("Length: " + intRange.Length());  

        var doubleRange = new Range<double>(5.5, 10.0);
        Console.WriteLine(doubleRange.IsInRange(7.1));  
        Console.WriteLine("Length: " + doubleRange.Length());
    }

// Q 2
public class ListReverse
{
    public static void ReverseInPlace<T>(List<T> list)
    {
        if (list == null)
            throw new ArgumentNullException(nameof(list));

        int left = 0;
        int right = list.Count - 1;

        while (left < right)
        {
            T temp = list[left];
            list[left] = list[right];
            list[right] = temp;

            left++;
            right--;
        }
    }
}
static void Main()
    {
        ArrayList List1 = new ArrayList() { 1, 2, 3, 4, 5 };
        
        Console.WriteLine("Original List:");
        foreach (var item in List1)
            Console.Write(item + " "); 
        
        ListReverse.ReverseInPlace(List1);

        Console.WriteLine("\nReversed List:");
        foreach (var item in List1)
            Console.Write(item + " ");  1
    }

// Q 3 
public class EvenNumberFilter
{
    public static List<int> GetEvenNumbers(List<int> numbers)
    {
        if (numbers == null)
            throw new ArgumentNullException(nameof(numbers));

        List<int> evenNumbers = new List<int>();

        foreach (int num in numbers)
        {
            if (num % 2 == 0)
                evenNumbers.Add(num);
        }

        return evenNumbers;
    }
}
static void Main()
    {
        List<int> List1 = new List<int> { 1, 2, 3, 4, 5, 6 };

        List<int> evenList = EvenNumberFilter.GetEvenNumbers(List1);

        Console.WriteLine("Even Numbers:");
       foreach (int num in evenList)
        {
          Console.Write(num + " ");
        } 
    }

// Q 4 
public class List1<T>
{
    private T[] items;
    private int count;

    public int Capacity { get; set;}
    public int Count  { get; set;}

    public FixedSizeList(int capacity)
    {
        if (capacity <= 0)
            throw new ArgumentException("Capacity must be greater than zero.");

        Capacity = capacity;
        items = new T[capacity];
        count = 0;
    }

    public void Add(T item)
    {
        if (count >= Capacity)
            throw new InvalidOperationException(" The list is full.");

        items[count] = item;
        count++;
    }

    public T Get(int index)
    {
        if (index < 0 || index >= count)
            throw new IndexOutOfRangeException("Index is out of range.");

        return items[index];
    }
}
static void Main()
    {
        List1<string> names = new List1<string>(3);

        try
        {
            names.Add("Alice");
            names.Add("Bob");
            names.Add("Charlie");

            Console.WriteLine("List contents:");
            for (int i = 0; i < names.Count; i++)
            {
                Console.WriteLine($"Index {i}: {names.Get(i)}");
            }
